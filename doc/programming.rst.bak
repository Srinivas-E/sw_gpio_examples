.. _sec_api:

Programming Guide
=================

Simple Demo
-----------

Structure
+++++++++

All of the files required for operation are located in the ``app_slicekit_simple_demo/src`` directory. The files that are need to be included for use of this component in an application are:

.. list-table::
    :header-rows: 2
    
    * - File
      - Description
    * - ``common.h``
      - Header file for API interfaces and Look up tables for thermistor.
    * - ``main.xc``
      - Main file which implements the demo functionality

API
+++

.. doxygenfunction:: app_manager
.. doxygenfunction:: linear_interpolation
.. doxygenfunction:: read_adc_value

Usage and Implementation
++++++++++++++++++++++++

The port declaration for LED's Buttons and I2C are declared as below. LEDs and Buttons uses 4 bit ports and I2C uses 1 bit port for SCL(I2c Clock) and SDA (I2C data).

.. literalinclude:: app_slicekit_simple_demo/src/main.xc
   :start-after: //::Port configuration
   :end-before: //::Ports

The app_manager API writes the configuration settings information to the ADC as shows below.

.. literalinclude:: app_slicekit_simple_demo/src/main.xc
   :start-after: //::Write config
   :end-before: //::Config

The select statement in the app_manager API selects one of the two cases in it, checks if there is IO event or timer even. This statement monitors both the events and execute which ever event is occurred first.  
The select statement in the applciation is listed below. The statement checks if there is button press or not. If there is button press then it looks if the button state is same even after 200msec. If the buton state is same then it recognises as an valid push.

.. literalinclude:: app_slicekit_simple_demo/src/main.xc
   :start-after: //::Select start
   :end-before: //::Select

After recognising the valid push then it checks if Button 1 is pressed or Button 2 is pressed. IF Button 1 is pressed then, the application reads the status of LEDs and shift the position of the LEDs to left by 1.
If Button 2 is pressed, then the applciation reads the contents of ADC register using I2C read instruction and input the ADC value to linear interpolation function as shown below.

.. literalinclude:: app_slicekit_simple_demo/src/main.xc
   :start-after: //::Linear Interpolation
   :end-before: //::Linear

The linear intepolation function calculates the linear interpolation value using the following formula and returns the temperature value from temperature look up table.

.. literalinclude:: app_slicekit_simple_demo/src/main.xc
   :start-after: //::Formula start
   :end-before: //::Formula
 
.. literalinclude:: app_slicekit_simple_demo/src/main.xc
   :start-after: //::LUT start
   :end-before: //::LUT




COM Port Demo
-------------

Structure
+++++++++

All of the files required for operation are located in the ``app_slicekit_simple_demo/src`` directory. The files that are need to be included for use of this component in an application are:

.. list-table::
    :header-rows: 2
    
    * - File
      - Description
    * - ``common.h``
      - Header file for API interfaces and Look up tables for thermistor. FIXME - what about the uart
    * - ``main.xc``
      - Main file which implements the demo functionality

API
+++

.. doxygenfunction:: app_manager
.. doxygenfunction:: process_data
.. doxygenfunction:: uart_tx_string
.. doxygenfunction:: linear_interpolation
.. doxygenfunction:: read_adc_value


Usage and Implementation
++++++++++++++++++++++++

FIXME: Add a section to cover:

- once the large body of initialisation stuff between lines 108 and 150 of main.xc have been split up and commented, you can cover the basic sequence here
- how the app select is extended to handle rx events from uart (e.g. we test for presence of data in the rx channel). A few words explaining about how channels can be used in select statements is appropriate here.
- a bit about the program control flow - no need to go overboard, just a few words about program flow.

